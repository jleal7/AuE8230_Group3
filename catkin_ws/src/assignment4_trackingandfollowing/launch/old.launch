<launch>

  <!-- 1. launch Gazebo -->
  
  <env name="GAZEBO_RESOURCE_PATH" value="$(find turtlebot3_gazebo)/models/autorace/ground_picture" />

  <arg name="x_pos" default="0.8"/>
  <arg name="y_pos" default="-1.747"/>
  <arg name="z_pos" default="0"/>  

  <!-- launch this launch file -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_autorace_2020.world" />
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>  

  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_burger_for_autorace_2020.urdf.xacro" />
  <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" args="-urdf -model autorace -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -param robot_description" />
  
  <!-- 2. Launch intrinsic camera calibration -->
  
  <arg name="mode" default="action" doc="mode type [calibration, action]"/>

  <group>
    <!-- image transport from compressed to raw -->
    <node pkg="image_transport" type="republish" name="republish" args="compressed">
      <remap from="in"  to="camera/rgb/image_raw" />
      <remap from="out"   to="camera/image"/>
    </node>
    <node pkg="topic_tools" type="relay" name="relay_camera_info" args="/camera/rgb/camera_info /camera/camera_info"/>
  </group>

  <!-- if calibration mode is calibration -->
  <node if="$(eval mode == 'calibration')" pkg="camera_calibration" type="cameracalibrator.py" name="cameracalibrator" args="--size 8x6 --square 0.02639 image:=/camera/image camera:=/camera" output="screen"/>
  
  <!-- if calibration mode is action -->
  <node if="$(eval mode == 'action')" ns="camera" pkg="image_proc" type="image_proc" name="image_proc" args="_approximate_sync:=true" output="screen">
    <remap from="image_raw" to="image" />
    <param name="queue_size" value="20" />
  </node>
  
  <!-- 3. Launch extrinsic camera calibration -->

  <group ns="camera">
    <!-- image brightness & contrast compensation of ground-projected image -->
    <node pkg="turtlebot3_autorace_camera" type="image_compensation" name="image_compensation" output="screen">
      <rosparam command="load" file="$(find turtlebot3_autorace_camera)/calibration/extrinsic_calibration/compensation.yaml" />
      <param if="$(eval mode == 'calibration')" name="/is_extrinsic_camera_calibration_mode" value="True"/>
      <param if="$(eval mode == 'action')" name="/is_extrinsic_camera_calibration_mode" value="False"/>
      <remap from="/camera/image_input" to="/camera/image_rect_color" />
      <remap from="/camera/image_input/compressed" to="/camera/image_rect_color/compressed" />
      <remap from="/camera/image_output" to="/camera/image_compensated" />
      <remap from="/camera/image_output/compressed" to="/camera/image_compensated/compressed" />
    </node>

    <!-- image ground projection -->
    <node pkg="turtlebot3_autorace_camera" type="image_projection" name="image_projection" output="screen">
      <rosparam command="load" file="$(find turtlebot3_autorace_camera)/calibration/extrinsic_calibration/projection.yaml" />
      <param if="$(eval mode == 'calibration')" name="/is_extrinsic_camera_calibration_mode" value="True"/>
      <param if="$(eval mode == 'action')" name="/is_extrinsic_camera_calibration_mode" value="False"/>    
      <remap from="/camera/image_input" to="/camera/image_rect_color" />
      <remap from="/camera/image_input/compressed" to="/camera/image_rect_color/compressed" />
      <remap from="/camera/image_output" to="/camera/image_projected" />
      <remap from="/camera/image_output/compressed" to="/camera/image_projected/compressed" />
      <remap from="/camera/image_calib" to="/camera/image_extrinsic_calib" />
      <remap from="/camera/image_calib/compressed" to="/camera/image_extrinsic_calib/compressed" />
    </node>

    <!-- image brightness & contrast compensation of ground-projected image -->
    <node pkg="turtlebot3_autorace_camera" type="image_compensation" name="image_compensation_projection" output="screen">
      <rosparam command="load" file="$(find turtlebot3_autorace_camera)/calibration/extrinsic_calibration/compensation.yaml" />
      <param if="$(eval mode == 'calibration')" name="/is_extrinsic_camera_calibration_mode" value="True"/>
      <param if="$(eval mode == 'action')" name="/is_extrinsic_camera_calibration_mode" value="False"/>    
      <remap from="/camera/image_input" to="/camera/image_projected" />
      <remap from="/camera/image_input/compressed" to="/camera/image_projected/compressed" />
      <remap from="/camera/image_output" to="/camera/image_projected_compensated" />
      <remap from="/camera/image_output/compressed" to="/camera/image_projected_compensated/compressed" />
    </node>
  </group>
  
  <!-- 4. Lauch python script to control robot -->
   
   <node pkg="assignment4_trackingandfollowing" type="laneTrack_gazebo.py" name="PythonScript">
  </node>

</launch>


